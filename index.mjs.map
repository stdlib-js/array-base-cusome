{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplex128Array from '@stdlib/array-base-assert-is-complex128array';\nimport isComplex64Array from '@stdlib/array-base-assert-is-complex64array';\nimport isBooleanArray from '@stdlib/array-base-assert-is-booleanarray';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array are truthy.\n*\n* @private\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var x = [ false, false, false, true, true ];\n* var y =  [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var out = indexed( x, 2, y, 2, 0 );\n* // returns [ false, null, false, null, false, null, false, null, true, null ]\n*/\nfunction indexed( x, n, y, stride, offset ) {\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !flg && x[ i ] ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\ty[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n/**\n* Cumulatively tests whether at least `n` array elements in an accessor array are truthy.\n*\n* @private\n* @param {Object} x - input array object\n* @param {integer} n - number of elements\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ false, false, false, true, true ] );\n* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, true, null ] );\n*\n* var arr = accessors( arraylike2object( x ), 2, arraylike2object( y ), 2, 0 );\n*\n* var v = y.get( 0 );\n* // returns false\n*\n* v = y.get( 2 );\n* // returns false\n*\n* v = y.get( 4 );\n* // returns false\n*\n* v = y.get( 6 );\n* // returns false\n*\n* v = y.get( 8 );\n* // returns true\n*/\nfunction accessors( x, n, y, stride, offset ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( !flg && xget( xdata, i ) ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided complex number array are truthy.\n*\n* @private\n* @param {Collection} x - array containing interleaved real and imaginary components\n* @param {integer} n - number of elements\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 ] );\n* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, false, null ] );\n*\n* var arr = complex( x, 2, arraylike2object( y ), 2, 0 );\n*\n* var v = y.get( 0 );\n* // returns false\n*\n* v = y.get( 2 );\n* // returns false\n*\n* v = y.get( 4 );\n* // returns false\n*\n* v = y.get( 6 );\n* // returns false\n*\n* v = y.get( 8 );\n* // returns false\n*/\nfunction complex( x, n, y, stride, offset ) {\n\tvar ydata;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tyset = y.accessors[ 1 ];\n\tydata = y.data;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < x.length; i += 2 ) {\n\t\tif ( !flg && ( x[ i ] || x[ i+1 ] ) ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array are truthy.\n*\n* @private\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* import Uint8Array from '@stdlib/array-uint8';\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = new Uint8Array( [ 0, 0, 0, 1, 0 ] );\n* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, false, null ] );\n*\n* var arr = boolean( x, 2, arraylike2object( y ), 2, 0 );\n*\n* var v = y.get( 0 );\n* // returns false\n*\n* v = y.get( 2 );\n* // returns false\n*\n* v = y.get( 4 );\n* // returns false\n*\n* v = y.get( 6 );\n* // returns false\n*\n* v = y.get( 8 );\n* // returns false\n*/\nfunction boolean( x, n, y, stride, offset ) {\n\tvar ydata;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tyset = y.accessors[ 1 ];\n\tydata = y.data;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !flg && x[ i ] ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array are truthy and assigns results to provided output array.\n*\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var x = [ false, false, false, true, true ];\n* var y =  [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var out = assign( x, 2, y, 2, 0 );\n* // returns [ false, null, false, null, false, null, false, null, true, null ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\nfunction assign( x, n, y, stride, offset ) {\n\tvar xo = arraylike2object( x );\n\tvar yo = arraylike2object( y );\n\tif (\n\t\txo.accessorProtocol ||\n\t\tyo.accessorProtocol\n\t) {\n\t\t// If provided a complex number array, reinterpret as a real typed array and test interleaved real and imaginary components, where we consider a complex number to be truthy if at least one component is non-zero...\n\t\tif ( isComplex128Array( x ) ) {\n\t\t\treturn complex( reinterpret128( x, 0 ), n, yo, stride, offset );\n\t\t}\n\t\tif ( isComplex64Array( x ) ) {\n\t\t\treturn complex( reinterpret64( x, 0 ), n, yo, stride, offset );\n\t\t}\n\t\tif ( isBooleanArray( x ) ) {\n\t\t\treturn boolean( reinterpretBoolean( x, 0 ), n, yo, stride, offset );\n\t\t}\n\t\treturn accessors( xo, n, yo, stride, offset );\n\t}\n\tindexed( x, n, y, stride, offset );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array are truthy.\n*\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @returns {Array} output array\n*\n* @example\n* var x = [ false, false, false, true, true ];\n*\n* var y = cusome( x, 2 );\n* // returns [ false, false, false, false, true ]\n*/\nfunction cusome( x, n ) {\n\tvar y = filled( true, x.length );\n\treturn assign( x, n, y, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default cusome;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether at least `n` array elements in a provided array are truthy.\n*\n* @module @stdlib/array-base-cusome\n*\n* @example\n* import cusome from '@stdlib/array-base-cusome';\n*\n* var x = [ false, false, false, true, true ];\n*\n* var y = cusome( x, 2 );\n* // returns [ false, false, false, false, true ]\n*\n* @example\n* import cusome from '@stdlib/array-base-cusome';\n*\n* var x = [ false, false, false, true, true ];\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var arr = cusome.assign( x, 2, y, 2, 0 );\n* // returns [ false, null, false, null, false, null, false, null, true, null ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["complex","x","n","y","stride","offset","ydata","yset","flg","io","i","accessors","data","length","assign","xo","arraylike2object","yo","accessorProtocol","isComplex128Array","reinterpret128","isComplex64Array","reinterpret64","isBooleanArray","boolean","reinterpretBoolean","xdata","xget","indexed","cusome","filled","setReadOnly","main"],"mappings":";;y8BA4KA,SAASA,EAASC,EAAGC,EAAGC,EAAGC,EAAQC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAOJ,IALAH,EAAOJ,EAAEQ,UAAW,GACpBL,EAAQH,EAAES,KAEVJ,GAAM,EACNC,EAAKJ,EACCK,EAAI,EAAGA,EAAIT,EAAEY,OAAQH,GAAK,EACzBF,IAASP,EAAGS,KAAOT,EAAGS,EAAE,KAC7BR,GAAK,IACK,IACTM,GAAM,GAGRD,EAAMD,EAAOG,EAAID,GACjBC,GAAML,EAEP,OAAOE,CACR,CAsFA,SAASQ,EAAQb,EAAGC,EAAGC,EAAGC,EAAQC,GACjC,IAAIU,EAAKC,EAAkBf,GACvBgB,EAAKD,EAAkBb,GAC3B,OACCY,EAAGG,kBACHD,EAAGC,iBAGEC,EAAmBlB,GAChBD,EAASoB,EAAgBnB,EAAG,GAAKC,EAAGe,EAAIb,EAAQC,GAEnDgB,EAAkBpB,GACfD,EAASsB,EAAerB,EAAG,GAAKC,EAAGe,EAAIb,EAAQC,GAElDkB,EAAgBtB,GA9DvB,SAAkBA,EAAGC,EAAGC,EAAGC,EAAQC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAOJ,IALAH,EAAOJ,EAAEQ,UAAW,GACpBL,EAAQH,EAAES,KAEVJ,GAAM,EACNC,EAAKJ,EACCK,EAAI,EAAGA,EAAIT,EAAEY,OAAQH,KACpBF,GAAOP,EAAGS,KACfR,GAAK,IACK,IACTM,GAAM,GAGRD,EAAMD,EAAOG,EAAID,GACjBC,GAAML,EAEP,OAAOE,CACR,CAwCUkB,CAASC,EAAoBxB,EAAG,GAAKC,EAAGe,EAAIb,EAAQC,GA9L9D,SAAoBJ,EAAGC,EAAGC,EAAGC,EAAQC,GACpC,IAAIqB,EACApB,EACAqB,EACApB,EACAC,EACAC,EACAC,EAUJ,IARAgB,EAAQzB,EAAEW,KACVN,EAAQH,EAAES,KAEVe,EAAO1B,EAAEU,UAAW,GACpBJ,EAAOJ,EAAEQ,UAAW,GAEpBH,GAAM,EACNC,EAAKJ,EACCK,EAAI,EAAGA,EAAIgB,EAAMb,OAAQH,KACxBF,GAAOmB,EAAMD,EAAOhB,KACzBR,GAAK,IACK,IACTM,GAAM,GAGRD,EAAMD,EAAOG,EAAID,GACjBC,GAAML,EAEP,OAAOE,CACR,CAoKSK,CAAWI,EAAIb,EAAGe,EAAIb,EAAQC,IAvPvC,SAAkBJ,EAAGC,EAAGC,EAAGC,EAAQC,GAClC,IAAIG,EACAC,EACAC,EAIJ,IAFAF,GAAM,EACNC,EAAKJ,EACCK,EAAI,EAAGA,EAAIT,EAAEY,OAAQH,KACpBF,GAAOP,EAAGS,KACfR,GAAK,IACK,IACTM,GAAM,GAGRL,EAAGM,GAAOD,EACVC,GAAML,CAGR,CAuOCwB,CAAS3B,EAAGC,EAAGC,EAAGC,EAAQC,GACnBF,EACR,CCrQA,SAAS0B,EAAQ5B,EAAGC,GAEnB,OAAOY,EAAQb,EAAGC,EADV4B,GAAQ,EAAM7B,EAAEY,QACA,EAAG,EAC5B,CCQAkB,EAAAC,EAAA,SAAAlB"}