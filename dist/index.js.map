{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isComplex128Array = require( '@stdlib/array-base-assert-is-complex128array' );\nvar isComplex64Array = require( '@stdlib/array-base-assert-is-complex64array' );\nvar isBooleanArray = require( '@stdlib/array-base-assert-is-booleanarray' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array are truthy.\n*\n* @private\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var x = [ false, false, false, true, true ];\n* var y =  [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var out = indexed( x, 2, y, 2, 0 );\n* // returns [ false, null, false, null, false, null, false, null, true, null ]\n*/\nfunction indexed( x, n, y, stride, offset ) {\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !flg && x[ i ] ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\ty[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n/**\n* Cumulatively tests whether at least `n` array elements in accessor array are truthy.\n*\n* @private\n* @param {Object} x - input array object\n* @param {integer} n - number of elements\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ false, false, false, true, true ] );\n* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, true, null ] );\n*\n* var arr = accessors( arraylike2object( x ), 2, arraylike2object( y ), 2, 0 );\n*\n* var v = y.get( 0 );\n* // returns false\n*\n* v = y.get( 2 );\n* // returns false\n*\n* v = y.get( 4 );\n* // returns false\n*\n* v = y.get( 6 );\n* // returns false\n*\n* v = y.get( 8 );\n* // returns true\n*/\nfunction accessors( x, n, y, stride, offset ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( !flg && xget( xdata, i ) ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided complex number are truthy and assigns results to provided output array.\n*\n* @private\n* @param {Collection} x - array containing interleaved real and imaginary components\n* @param {integer} n - number of elements\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 ] );\n* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, false, null ] );\n*\n* var arr = complex( x, 2, arraylike2object( y ), 2, 0 );\n*\n* var v = y.get( 0 );\n* // returns false\n*\n* v = y.get( 2 );\n* // returns false\n*\n* v = y.get( 4 );\n* // returns false\n*\n* v = y.get( 6 );\n* // returns false\n*\n* v = y.get( 8 );\n* // returns false\n*/\nfunction complex( x, n, y, stride, offset ) {\n\tvar ydata;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tyset = y.accessors[ 1 ];\n\tydata = y.data;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < x.length; i += 2 ) {\n\t\tif ( !flg && ( x[ i ] || x[ i+1 ] ) ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array are truthy.\n*\n* @private\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = new Uint8Array( [ 0, 0, 0, 1, 0 ] );\n* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, false, null ] );\n*\n* var arr = boolean( x, 2, arraylike2object( y ), 2, 0 );\n*\n* var v = y.get( 0 );\n* // returns false\n*\n* v = y.get( 2 );\n* // returns false\n*\n* v = y.get( 4 );\n* // returns false\n*\n* v = y.get( 6 );\n* // returns false\n*\n* v = y.get( 8 );\n* // returns false\n*/\nfunction boolean( x, n, y, stride, offset ) {\n\tvar ydata;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tyset = y.accessors[ 1 ];\n\tydata = y.data;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !flg && x[ i ] ) {\n\t\t\tn -= 1;\n\t\t\tif ( n <= 0 ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array are truthy and assigns results to provided output array.\n*\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @returns {Collection} output array\n*\n* @example\n* var x = [ false, false, false, true, true ];\n* var y =  [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var out = assign( x, 2, y, 2, 0 );\n* // returns [ false, null, false, null, false, null, false, null, true, null ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\nfunction assign( x, n, y, stride, offset ) {\n\tvar xo = arraylike2object( x );\n\tvar yo = arraylike2object( y );\n\tif (\n\t\txo.accessorProtocol ||\n\t\tyo.accessorProtocol\n\t) {\n\t\t// If provided a complex number array, reinterpret as a real typed array and test interleaved real and imaginary components, where we consider a complex number to be truthy if at least one component is non-zero...\n\t\tif ( isComplex128Array( x ) ) {\n\t\t\treturn complex( reinterpret128( x, 0 ), n, yo, stride, offset );\n\t\t}\n\t\tif ( isComplex64Array( x ) ) {\n\t\t\treturn complex( reinterpret64( x, 0 ), n, yo, stride, offset );\n\t\t}\n\t\tif ( isBooleanArray( x ) ) {\n\t\t\treturn boolean( reinterpretBoolean( x, 0 ), n, yo, stride, offset );\n\t\t}\n\t\treturn accessors( xo, n, yo, stride, offset );\n\t}\n\tindexed( x, n, y, stride, offset );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar filled = require( '@stdlib/array-base-filled' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least `n` array elements in a provided array are truthy.\n*\n* @param {Collection} x - input array\n* @param {integer} n - number of elements\n* @returns {Array} output array\n*\n* @example\n* var x = [ false, false, false, true, true ];\n*\n* var y = cusome( x, 2 );\n* // returns [ false, false, false, false, true ]\n*/\nfunction cusome( x, n ) {\n\tvar y = filled( true, x.length );\n\treturn assign( x, n, y, 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cusome;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether at least `n` array elements in a provided array are truthy.\n*\n* @module @stdlib/array-base-cusome\n*\n* @example\n* var cusome = require( '@stdlib/array-base-cusome' );\n*\n* var x = [ false, false, false, true, true ];\n*\n* var y = cusome( x, 2 );\n* // returns [ false, false, false, false, true ]\n*\n* @example\n* var cusome = require( '@stdlib/array-base-cusome' );\n*\n* var x = [ false, false, false, true, true ];\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var arr = cusome.assign( x, 2, y, 2, 0 );\n* // returns [ false, null, false, null, false, null, false, null, true, null ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "isComplex128Array", "isComplex64Array", "isBooleanArray", "arraylike2object", "reinterpret128", "reinterpret64", "reinterpretBoolean", "indexed", "x", "n", "y", "stride", "offset", "flg", "io", "i", "accessors", "xdata", "ydata", "xget", "yset", "complex", "boolean", "assign", "xo", "yo", "require_main", "__commonJSMin", "exports", "module", "filled", "assign", "cusome", "x", "n", "y", "setReadOnly", "main", "assign"]
}
